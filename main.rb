require 'telegram/bot'
require 'json'

token = '' # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
master = 0 # –∞–π–¥–∏ —á–∞—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞

@txt = ''

smile =
	[
		"üòÄ","üòÉ","üòÑ","üòÅ","üòÜ","üòÖ","üòÇ","ü§£","üòä","üòá","üôÇ","üôÉ","üòâ","üòå","üòç","üòò","üòó","üòô","üòö","üòã","üòú","üòù","üòõ","ü§ë","ü§ó","ü§ì","üòé","ü§°","ü§†","üòè","üòí","üòû","üòî","üòü","üòï","üôÅ","üò£","üòñ","üò´","üò©","üò§","üò†","üò°","üò∂","üòê","üòë","üòØ","üò¶","üòß","üòÆ","üò≤","üòµ","üò≥","üò±","üò®","üò∞","üò¢","üò•","ü§§","üò≠","üòì","üò™","üò¥","üôÑ","ü§î","ü§•","üò¨","ü§ê","ü§¢","ü§ß","üò∑","ü§í","ü§ï","üòà","üëø","üëπ","üë∫","üí©","üëª","üíÄ","üëΩ","üëæ","ü§ñ","üéÉ","üò∫","üò∏","üòπ","üòª","üòº","üòΩ","üôÄ","üòø","üòæ","üëê","üôå","üëè","üôè","ü§ù","üëç","üëé","üëä","‚úä","ü§õ","ü§ú","ü§û","ü§ò","üëå","üëà","üëâ","üëÜ","üëá","‚úã","ü§ö","üñê","üññ","üëã","ü§ô","üí™","üñï","ü§≥","üíÖ","üíç","üíÑ","üíã","üëÑ","üëÖ","üëÇ","üëÉ","üëÅ","üëÄ","üó£","üë§","üë•","üë∂","üë¶","üëß","üë®","üë©","üë±","üë¥","üëµ","üë≤","üë≥","üë≥","üëÆ","üë∑","üíÇ","üïµ","ü§∂","üéÖ","üë∏","ü§¥","üë∞","ü§µ","üëº","ü§∞","üôá","üíÅ","üôÖ","üôÜ","üôã","ü§¶","ü§∑","üôé","üíá","üíÜ","üï¥","üíÉ","üï∫","üëØ","üëØ","üö∂","üèÉ","üë≠","üë¨","üíë","üíè","üë™","üëö","üëï","üëñ","üëî","üëó","üëô","üëò","üë†","üë°","üë¢","üëû","üëü","üëí","üé©","üéì","üëë","‚õë","üéí","üëù","üëõ","üëú","üíº","üëì","üï∂","üåÇ"
	]
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
if File.exist?('black_list.json') == false
	File.new('black_list.json', 'w')
	hh = Hash.new
	hash = File.open('black_list.json', 'w')
	hash.write(JSON.generate(hh))
	hash.close
end
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
if File.exist?('white_list.json') == false
	File.new('white_list.json', 'w')
	hh = Hash.new
	hash = File.open('white_list.json', 'w')
	hash.write(JSON.generate(hh))
	hash.close
end
# –°–æ–∑–¥–∞—ë–º —Ö–µ—à –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ hostname
white_list = JSON.parse(File.read('white_list.json'))
@hh = Hash.new
white_list.each do |key, value|
		@hh[key] = ''
end
# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
def add_2_list input
	list = JSON.parse(File.read('black_list.json'))
	list[input["id"]] = {
		"first_name" => input["first_name"],
		"last_name" => input["last_name"],
		"username" => input["username"],
	}
	add_to_list = File.open('black_list.json', 'w')
	add_to_list.write(JSON.generate(list))
	add_to_list.close
end
# –ü–æ–ª—É—á–µ–º —Ö–æ—Å—Ç–Ω—ç–π–º
def get_hostname get
	# –°–æ–æ–±—â–µ–Ω–∏–µ
	message = get[0]
	# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	usr_id = get[1]
	# –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª —é–∑–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
	# @hh[usr_id] = '' if @hh[usr_id] == nil
	if message == '*'
		puts "–∑–≤—ë–∑–¥–æ—á–∫–∞ #{message}"
	elsif message == '#'
		puts "—Ä–µ—à–µ—Ç–∫–∞ #{message}"
	else
		numbers = [1,2,3,4,5,6,7,8,9,0]
		numbers.each do |c|
			if message == c.to_s
				# puts "#{message} = #{c}"
				@hh[usr_id] = @hh[usr_id] + message
				if @hh[usr_id].size == 6
					puts "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç ip –¥–ª—è eva#{@hh[usr_id]}"
					hostname = @hh[usr_id]
					@hh[usr_id] = ''
					# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å—á–µ—Ç
					raschet hostname
				end
			end
		end
	end
end
# –†–∞—Å—á—ë—Ç
def raschet x
	eva = {}
	eva['S'] = x[0].to_i
	eva['AA'] = (x[1].to_s + x[2].to_s).to_i
	eva['B'] = x[3].to_i
	eva['CC'] = (x[4].to_s + x[5].to_s).to_i
	# puts "–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç ip –¥–ª—è eva#{x}"
	if eva['S'] == 0
		@txt = '–ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞'
		# puts @txt
		# –¥–ª—è –∏—Ü–≤–∞-1
		elsif eva['S'] == 5
			ad1 = 224
			if eva['AA'] < 4 || eva['AA'] > 43
				@txt = '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—É—Ä—è–¥–∞'
				puts '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—É—Ä—è–¥–∞'
			elsif eva['B'] == '' || eva['B'] > 6
				@txt = '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —à–∫–∞—Ñ–∞'
				puts '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —à–∫–∞—Ñ–∞'
			elsif eva['CC'] > 23
				@txt = '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞'
				puts '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞'
				else
					ad2 = 144 + (eva['AA'].to_f / 16).floor
					ad3 = (eva['AA'] % 16) * 16 + eva['B']
					if (eva['AA'].to_f / 2).floor == eva['AA'].to_f / 2
						ad4 = (eva['AA'] % 16) * 16
					else
						ad4 = ((eva['AA'] - 1) % 16) * 16
					end
					# –û—Ç–≤–µ—Ç
					@txt = "eva#{x}\n\taddress 10.#{ad2}.#{ad3}.#{eva['CC']}\n\tgateway 10.#{ad2}.#{ad4}.254\n\tnetmask 255.255.#{ad1}.0"
					# puts @txt
			end
		# –¥–ª—è –∏—Ü–≤–∞-2, –∏—Ü–≤–∞-3
		elsif eva['S'] == 6
			ad1 =240
			if eva['AA'] < 4
				@txt = '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—É—Ä—è–¥–∞'
				puts '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—É—Ä—è–¥–∞'
			elsif eva['CC'] > 31
				@txt = '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞'
				puts '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞'
			elsif (eva['AA'] & 1) != 0 && eva['B'] == 0
				@txt = '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —à–∫–∞—Ñ–∞'
				puts '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —à–∫–∞—Ñ–∞'
				else
					ad2 = 148 + (eva['AA'].to_f / 16).floor
					ad3 = (eva['AA'] % 16) * 16 + eva['B']
					ad4 = (eva['AA'] % 16) * 16
					ad5 = 224 if eva['B'] + eva['CC'] == 0
					ad5 = eva['CC'] if eva['B'] + eva['CC'] != 0
					# –û—Ç–≤–µ—Ç
					@txt = "eva#{x}\n\taddress 10.#{ad2}.#{ad3}.#{ad5}\n\tgateway 10.#{ad2}.#{ad4}.254\n\tnetmask 255.255.#{ad1}.0"
					# puts @txt
			end
		else
			# –û—Ç–≤–µ—Ç
			@txt = '–ù–µ –ø–æ–ø–∞–ª'
			puts '–ù–µ –ø–æ–ø–∞–ª'
	end
end

Telegram::Bot::Client.run(token, logger: Logger.new($stdout)) do |bot|
	# –í—ã–≤–æ–¥–∏—Ç —É–¥–æ–±–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	show_kd =
						Telegram::Bot::Types::ReplyKeyboardMarkup
						.new(keyboard: [%w(1 2 3), %w(4 5 6), %w(7 8 9), %w(* 0 #)], one_time_keyboard: false)
	# –í—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç
	hide_kb =
						Telegram::Bot::Types::ReplyKeyboardMarkup
						.new(keyboard: '/start', one_time_keyboard: false)
	# –£–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	delete_kb =
						Telegram::Bot::Types::ReplyKeyboardRemove
						.new(remove_keyboard: true)
	# –ü–∏—à–µ–º –≤ –ª–æ–≥, —á—Ç–æ –±–æ—Ç —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª
	bot.logger.info('Bot has been started')
	while true
		# check_updates
		# sleep 3
		# end
		begin
			bot.listen do |message|
				# –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
				white_list = JSON.parse(File.read('white_list.json'))
				# –û—Ç–∫—Ä—ã–≤–∞–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
				black_list = JSON.parse(File.read('black_list.json'))
				# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–º–∞–∏–ª
				hop_hey = "#{smile[rand(0..smile.size-1)]}#{smile[rand(0..smile.size-1)]}#{smile[rand(0..smile.size-1)]}"
				# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
				if white_list.key? message.from.id.to_s
					# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞
					first_name = white_list[message.from.id.to_s]['first_name']
					case message.text
						when '/start'
							@hh[message.from.id.to_s] = ''
							bot.api.send_message(chat_id: message.chat.id, text: "–ü—Ä–∏–≤–µ—Ç, #{first_name}!", reply_markup: show_kd)
						when '/ping'
							bot.api.send_message(chat_id: message.chat.id, text: hop_hey, reply_markup: delete_kb)
						when '/stop'
							bot.api.send_message(chat_id: message.chat.id, text: "–Ø —Å–ø–∞—Ç—å... üò¥", reply_markup: delete_kb)
					end
					if message.text.size == 1
						get = [message.text, message.from.id.to_s]
						get_hostname get
					end
					# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
					if @txt != ''
						bot.api.send_message(chat_id: message.chat.id, text: @txt, reply_markup: hide_kb)
						@txt = ''
					end
				# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
				elsif black_list.key? message.from.id.to_s
					# –ü–æ—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–º–∞–∏–ª
					bot.api.send_message(chat_id: message.chat.id, text: hop_hey, reply_markup: delete_kb)
				# –ò–Ω–∞—á–µ
				else
					# –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ö–µ—à
					hh = Hash.new
					hh["first_name"] = message.from.first_name
					hh["last_name"] = message.from.last_name
					hh["username"] = message.from.username
					hh["id"] = message.from.id
					# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
					add_2_list hh
					# –ü–æ—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
					bot.api.send_message(chat_id: message.chat.id, text: "–ù–∏ —á–µ–º –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å\n#{hop_hey}", reply_markup: delete_kb)
					# –ò –æ–ø–æ–≤–µ—â–∞–µ–º —Ö–æ–∑—è–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
					attention = "–£ –Ω–∞—Å –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ üëá\n#{hh["first_name"]} #{hh["last_name"]}:\n@#{hh["username"]}\nüÜî#{hh["id"]}"
					bot.api.send_message(chat_id: master, text: attention)
					bot.logger.info("–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: #{hh["username"]} uid=#{hh["id"]}")
				end
			end
			rescue StandardError => e
				puts e.message
				# puts e.backtrace.select{ |err| err =~ /bot/ }.join(', ')
				sleep 3
				retry
			else
				puts –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
				sleep 3
		end
	end
end